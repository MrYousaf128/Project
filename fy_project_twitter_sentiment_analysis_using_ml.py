# -*- coding: utf-8 -*-
"""FY Project Twitter sentiment analysis Using ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s56_dcb8e1zlvX6DGF-wGN1dbh3gOyjh
"""

!pip install kaggle
from google.colab import files
files.upload()  # Upload your kaggle.json here
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""Importing  Twitter dataset"""

# STEP 2: Download and unzip the dataset
!kaggle datasets download -d kazanova/sentiment140
!unzip -q sentiment140.zip

#extracting the cokpressed file
from zipfile import ZipFile
dataset = '/content/sentiment140.zip'  # Changed the file name to match the downloaded file

with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

"""Importing the dependecies"""

!pip install xgboost
import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

#printing the stop words in ENglish
print(stopwords.words('english'))

"""DATA preprocessing"""

# Replace 'correct_path/Twitter_Sentiment_Analysis.csv' with the actual path to your CSV file
twitter_data = pd.read_csv('training.1600000.processed.noemoticon.csv', encoding='ISO-8859-1')

#check the number of rows and columns
twitter_data.shape

twitter_data.head()

#naming the columns and reading dataset again
column_names = ['target','id','date','flag','user','text']
twitter_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv',names = column_names,encoding='ISO-8859-1')

twitter_data.head()

#counting the number if missing values
twitter_data.isnull().sum()

#checking the distribution of target coulumn
twitter_data['target'].value_counts()

"""Convert the target 4 to 1"""

twitter_data.replace(4,1,inplace=True)

twitter_data['target'].value_counts()

"""0 ---> Negative Tweet

1 ---> postive Tweet

Stemming
"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]',' ',content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

twitter_data['stemmed_content'] = twitter_data['text'].apply(stemming)  #its take too much time about to 1 hours

twitter_data.head()

print(twitter_data['target'])

#separating the data and label
X = twitter_data['stemmed_content'].values
Y = twitter_data['target'].values

print(X)

print(Y)

"""Splitting the data training and test data"""

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

# Vectorizing the text data using TfidfVectorizer
vectorizer = TfidfVectorizer(max_features=1000)  # Limit to 5000 features
X_train_vec = vectorizer.fit_transform([str(text) for text in X_train])
X_test_vec = vectorizer.transform([str(text) for text in X_test]) # Use transform instead of fit_transform for test data

# The rest of your code...

print(f"X_train shape: {X_train_vec.shape}")
print(f"y_train shape: {y_train.shape}")
print(f"X_test shape: {X_test_vec.shape}")
print(f"y_test shape: {y_test.shape}")

print(X_test)

"""TRAINING THE MACHINE LEARNING MODEL

LOGISTIC REGRESSION
"""

model =LogisticRegression()
model.fit(X_train_vec,y_train)

"""MODEL EVALUATION


Accracy Score

"""

#accuracy score on training data
X_train_prediction = model.predict(X_train_vec)
training_data_accuracy = accuracy_score(X_train_prediction,y_train)

print ('Accuracy score of the training data : ', training_data_accuracy)

X_test_prediction = model.predict(X_test_vec)
#test_data_accuracy = accuracy_score(y_test, X_test_prediction)
#print('Accuracy score of the test data: ', test_data_accuracy)

import pickle
filename = 'trained_model.sav'
pickle.dump(model,open(filename,'wb'))

#load the model using 'latin-1' encoding
loaded_model = pickle.load(open('/content/trained_model.sav', 'rb'), encoding='latin-1')

# STEP 10: Test a specific tweet from the dataset
index_in_X_test = 13000  # Change this index to try other samples
X_new = X_test[index_in_X_test]

# Get the original index in twitter_data
original_index = X_test.indices[index_in_X_test] if hasattr(X_test, 'indices') else index_in_X_test


X_new_text = twitter_data['text'].iloc[original_index]  # Get actual tweet text for display

X_new_vectorized = vectorizer.transform([X_new_text])  # Transform using the fitted vectorizer

prediction = loaded_model.predict(X_new_vectorized)  # Assuming loaded_model is the variable for your model
print(f"Tweet: {X_new_text}")
print("Prediction:", prediction)

if prediction[0] == 0:
    print("游린 The tweet is Negative")
else:
    print("游릴 The tweet is Positive")

"""Overall percentage"""

# STEP 11: Predict on all test data
# Assuming 'model' is your trained model
y_pred = model.predict(X_test_vec)  # Use X_test_vec, the vectorized test data

# Count positive and negative predictions
positive_count = sum(y_pred == 1)
negative_count = sum(y_pred == 0)
total = len(y_pred)

# Calculate percentages
positive_percent = (positive_count / total) * 100
negative_percent = (negative_count / total) * 100

# Display results
print(f"\n游릴 Positive tweets: {positive_count} ({positive_percent:.2f}%)")
print(f"游린 Negative tweets: {negative_count} ({negative_percent:.2f}%)")
print(f"游늵 Total analyzed tweets: {total}")

!pip install gradio
import gradio as gr
import pickle
from nltk.stem.porter import PorterStemmer
import re
from sklearn.feature_extraction.text import TfidfVectorizer

# ... (Your other imports, functions, and model training)

# === Save the model and vectorizer ===
with open('trained_model.sav', 'wb') as f:
    pickle.dump(model, f)
with open('vectorizer.pkl', 'wb') as f:
    pickle.dump(vectorizer, f)


def predict_sentiment(tweet):
    try:
        # Load model and vectorizer inside the function
        with open('trained_model.sav', 'rb') as f:
            loaded_model = pickle.load(f)
        with open('vectorizer.pkl', 'rb') as f:
            loaded_vectorizer = pickle.load(f)

        stemmed_tweet = stemming(tweet)  # Assuming stemming function is defined
        vectorized_tweet = loaded_vectorizer.transform([stemmed_tweet])
        prediction = loaded_model.predict(vectorized_tweet)[0]
        sentiment = "Positive" if prediction == 1 else "Negative"
        return sentiment
    except Exception as e:
        return f"Error: {str(e)}"


# Gradio Interface inside the __main__ block:
if __name__ == "__main__":
    iface = gr.Interface(
        fn=predict_sentiment,
        inputs=gr.Textbox(lines=2, placeholder="Enter a tweet here..."),
        outputs="text",
        title="Twitter Sentiment Analysis",
        description="Enter a tweet and find out if it's Positive or Negative."
    )

    iface.launch()